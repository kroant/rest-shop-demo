package cz.kromer.restshopdemo.controller;

import static cz.kromer.restshopdemo.TestConstants.SQL_CLEANUP;
import static cz.kromer.restshopdemo.dto.QuantityUnit.LITER;
import static cz.kromer.restshopdemo.dto.QuantityUnit.PIECE;
import static io.restassured.http.ContentType.JSON;
import static java.util.UUID.fromString;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.hamcrest.core.StringContains.containsString;
import static org.springframework.http.HttpStatus.NO_CONTENT;
import static org.springframework.http.HttpStatus.OK;

import java.math.BigDecimal;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.springframework.test.context.jdbc.Sql;

import cz.kromer.restshopdemo.SpringTest;
import cz.kromer.restshopdemo.dto.ProductDto;
import io.restassured.RestAssured;

class ProductControllerTest extends SpringTest {

    static final UUID PRODUCT_1_ID = fromString("10b10895-cce9-48c6-bc8c-7025d0a7fe57");

    @Test
    @Sql({ SQL_CLEANUP, "/sql/complex-test-data.sql" })
    void shouldGetAllProducts_whenExist() {
        RestAssured.given().when()
            .get("/products").then().log().all().assertThat()
            .statusCode(OK.value())
            .body("$", hasSize(3))
            .body(containsString(PRODUCT_1_ID.toString()));
    }

    @Test
    @Sql({ SQL_CLEANUP, "/sql/complex-test-data.sql" })
    void shouldGetProductById_whenExists() {
        RestAssured.given().when()
            .get("/products/{id}", PRODUCT_1_ID).then().log().all().assertThat()
            .statusCode(OK.value())
            .body("id", is(PRODUCT_1_ID.toString()))
            .body("name", is("Milk 500 ml"))
            .body("unit", is(PIECE.name()))
            .body("price", is(12f))
            .body("stock", is(30f));
    }

    @Test
    void shouldSaveProduct_WhenValid() {
        RestAssured.given().contentType(JSON).log().all()
            .body(ProductDto.builder()
                    .name("Bread 1 kg")
                    .unit(PIECE)
                    .price(BigDecimal.valueOf(32))
                    .stock(BigDecimal.valueOf(6000, 2))
                    .build()).when()
            .post("/products").then().log().all().assertThat()
            .statusCode(OK.value())
            .body("id", notNullValue())
            .body("name", is("Bread 1 kg"))
            .body("unit", is(PIECE.name()))
            .body("price", is(32f))
            .body("stock", is(60f));
    }

    @Test
    void shouldGenerateIdAndSaveProduct_WhenIdProvided() {
        RestAssured.given().contentType(JSON).log().all()
            .body(ProductDto.builder()
                    .id(new UUID(0, 0))
                    .name("Bread 1 kg")
                    .unit(PIECE)
                    .price(BigDecimal.valueOf(32))
                    .stock(BigDecimal.valueOf(60))
                    .build()).when()
            .post("/products").then().log().all().assertThat()
            .statusCode(OK.value())
            .body("id", not(new UUID(0, 0).toString())) // ID should be generated by the service.
            .body("name", is("Bread 1 kg"))
            .body("unit", is(PIECE.name()))
            .body("price", is(32f))
            .body("stock", is(60f));
    }

    @Test
    @Sql({ SQL_CLEANUP, "/sql/complex-test-data.sql" })
    void shouldUpdateProduct_WhenValidAndExists() {
        RestAssured.given().contentType(JSON).log().all()
            .body(ProductDto.builder()
                    .name("Updated Milk 500 ml")
                    .unit(LITER)
                    .price(BigDecimal.valueOf(10))
                    .stock(BigDecimal.valueOf(40))
                    .build()).when()
            .put("/products/{id}", PRODUCT_1_ID).then().log().all().assertThat()
            .statusCode(OK.value())
            .body("id", is(PRODUCT_1_ID.toString()))
            .body("name", is("Updated Milk 500 ml"))
            .body("unit", is(LITER.name()))
            .body("price", is(10f))
            .body("stock", is(40f));

        RestAssured.given().when()
            .get("/products/{id}", PRODUCT_1_ID).then().log().all().assertThat()
            .statusCode(OK.value())
            .body("id", is(PRODUCT_1_ID.toString()))
            .body("name", is("Updated Milk 500 ml"))
            .body("unit", is(LITER.name()))
            .body("price", is(10f))
            .body("stock", is(40f));
    }

    @Test
    @Sql({ SQL_CLEANUP, "/sql/complex-test-data.sql" })
    void shouldDeleteProduct_WhenExists() {
        RestAssured.given().log().all().when()
            .delete("/products/{id}", PRODUCT_1_ID).then().assertThat()
            .statusCode(NO_CONTENT.value());

        RestAssured.given().when()
            .get("/products").then().log().all().assertThat()
            .statusCode(OK.value())
            .body("$", hasSize(2))
            .body(not(containsString(PRODUCT_1_ID.toString())));
    }
}
